name: PR Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_target:
    types: [closed]

jobs:
  fivex_integration_run:
    runs-on: ubuntu-latest
    steps:
    - name: Check for DBT_TOKEN Secret
      run: |
        if [ -z "${{ secrets.DBT_TOKEN }}" ]; then
          echo "::error::DBT_TOKEN secret is not set. Please create Authorisation token at 5x DBT UI -> Project Settings -> Access tokens -> Create token and add it in Github secrets"
          exit 1
        fi
    - name: Trigger CI Jobs and Check Status
      if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize' || github.event.action == 'reopened')
      run: |
        PR_NUMBER=${{ github.event.pull_request.number }}
        BRANCH_NAME=${{ github.head_ref }}
        response=$(curl -s -o response.json -w "%{http_code}" -H "Authorization: ApiKey ${{ secrets.DBT_TOKEN }}" "https://devdbt.5x.co/projects/v1/3f25d726-99a7-42a1-9cca-b3dcc9d42943/jobs/ci/$PR_NUMBER/$BRANCH_NAME/run")
        if [ "$response" -eq 200 ]; then
          run_ids_json=$(cat response.json)
          echo "Triggered Jobs, Run IDs: $run_ids_json"
          echo "Proceeding with polling the run status"
          POLL_INTERVAL=60 # Poll every 60 seconds
          MAX_ATTEMPTS=30  # Maximum attempts
          attempt=0
          all_jobs_status="waiting"
          while [ $attempt -lt $MAX_ATTEMPTS ] && [ "$all_jobs_status" == "waiting" ]; do
            echo "Checking status of all jobs (attempt $((attempt+1))/$MAX_ATTEMPTS)..."
            all_jobs_status=$(curl -s -H "Authorization: ApiKey ${{ secrets.DBT_TOKEN }}" -X POST -H "Content-Type: application/json" -d "$run_ids_json" "https://devdbt.5x.co/projects/v1/3f25d726-99a7-42a1-9cca-b3dcc9d42943/jobs/job-status")
            if [ "$all_jobs_status" == 'failed' ]; then
              echo "::error::At least one job failed"
              exit 1
            elif [ "$all_jobs_status" == 'success' ]; then
              echo "All jobs completed successfully"
              break
            fi
            sleep $POLL_INTERVAL
            attempt=$((attempt+1))
          done
          if [ "$all_jobs_status" != 'success' ]; then
            echo "::error::Jobs did not complete successfully within the maximum time limit"
            exit 1
          fi
        else
          response_content=$(cat response.json)
          echo "Failed to trigger jobs, HTTP status: $response, Response: $response_content"
          exit 1
        fi
    - name: Handle PR Merge
      if: github.event_name == 'pull_request_target' && github.event.action == 'closed' && github.event.pull_request.merged == true
      run: |
        PR_NUMBER=${{ github.event.pull_request.number }}
        curl --location --request DELETE "https://devdbt.5x.co/projects/v1/3f25d726-99a7-42a1-9cca-b3dcc9d42943/jobs/ci/$PR_NUMBER" --header "Authorization: ApiKey ${{ secrets.DBT_TOKEN }}"
    - name: Handle PR Closure Without Merge
      if: github.event_name == 'pull_request_target' && github.event.action == 'closed' && github.event.pull_request.merged == false
      run: |
        PR_NUMBER=${{ github.event.pull_request.number }}
        echo "PR #$PR_NUMBER closed without merge"
